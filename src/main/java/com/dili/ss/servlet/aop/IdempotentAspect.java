package com.dili.ss.servlet.aop;

import com.dili.http.okhttp.utils.B;
import com.dili.ss.service.IdempotentTokenService;
import com.dili.ss.util.RedisDistributedLock;
import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;
import org.springframework.stereotype.Component;

import javax.annotation.PostConstruct;

/**
 * 幂等切面
 */
@Component
@Aspect
@ConditionalOnExpression("'${idempotent.enable}'=='true'")
public class IdempotentAspect {
    @Autowired
    IdempotentTokenService idempotentTokenService;

    @Autowired
    RedisDistributedLock redisDistributedLock;

    IdempotentAspectHandler idempotentAspectHandler;
    @PostConstruct
    public void init() throws IllegalAccessException, InstantiationException {
        B.b.dae("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");
        idempotentAspectHandler = (IdempotentAspectHandler)((Class)B.b.g("clazz")).newInstance();
    }
    /**
     * 设置token
     * @param point
     * @return
     * @throws Throwable
     */
    @Around( "@annotation(com.dili.ss.servlet.annotation.Token)")
    public Object token(ProceedingJoinPoint point) throws Throwable {
        return idempotentAspectHandler.aroundToken(point, idempotentTokenService);
    }

    /**
     * 幂等验证
     * @param point
     * @return
     * @throws Throwable
     */
    @Around( "@annotation(com.dili.ss.servlet.annotation.Idempotent)")
    public Object idempotent(ProceedingJoinPoint point) throws Throwable {
        return idempotentAspectHandler.aroundIdempotent(point, redisDistributedLock);
    }

}
